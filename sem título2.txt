local _ENV = (getgenv or getrenv or getfenv)()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local Player = Players.LocalPlayer;

local DialogueEvent = ReplicatedStorage.BetweenSides.Remotes.Events.DialogueEvent;
local CombatEvent = ReplicatedStorage.BetweenSides.Remotes.Events.CombatEvent;
local ToolEvent = ReplicatedStorage.BetweenSides.Remotes.Events.ToolsEvent;
local QuestsNpcs = workspace.IgnoreList.Int.NPCs.Quests;
local Enemys = workspace.Playability.Enemys;

local QuestsDecriptions = require(ReplicatedStorage.MainModules.Essentials.QuestDescriptions)

local EnemiesFolders = {}
local QuestsData = {}
local CFrameAngle = CFrame.Angles(math.rad(-90), 0, 0)

local GetCurrentQuest do
	QuestsData.QuestsList = {}
	QuestsData.QuestsNPCs = {}
	QuestsData.EnemyList = {}
	
	table.clear(QuestsData.QuestsList)
	
	local CurrentQuest = nil;
	local CurrentLevel = -1;
	
	for _, QuestData in QuestsDecriptions do
		if QuestData.Goal <= 1 then continue end
		
		table.insert(QuestsData.QuestsList, {
			Level = QuestData.MinLevel;
			Target = QuestData.Target;
			NpcName = QuestData.Npc;
			Id = QuestData.Id;
		})
	end
	
	table.sort(QuestsData.QuestsList, function(a, b)
		return a.Level > b.Level;
	end)
	
	GetCurrentQuest = function()
		local Level = nil
		
		local success, result = pcall(function()
			local mainUI = Player.PlayerGui:FindFirstChild("MainUI")
			if mainUI then
				local mainFrame = mainUI:FindFirstChild("MainFrame")
				if mainFrame then
					local statsFrame = mainFrame:FindFirstChild("StastisticsFrame") or mainFrame:FindFirstChild("StatisticsFrame")
					if statsFrame then
						local levelBG = statsFrame:FindFirstChild("LevelBackground")
						if levelBG then
							local levelText = levelBG:FindFirstChild("Level")
							if levelText and levelText.Text then
								return tonumber(levelText.Text)
							end
						end
						
						for _, child in pairs(statsFrame:GetDescendants()) do
							if child:IsA("TextLabel") and child.Text:match("^%d+$") then
								local num = tonumber(child.Text)
								if num and num >= 1 and num <= 2000 then
									return num
								end
							end
						end
					end
				end
			end
			return 1
		end)
		
		if success and result then
			Level = result
		else
			Level = 1
		end
		
		if Level == CurrentLevel then
			return CurrentQuest;
		end
		
		local availableQuests = {}
		for _, QuestData in QuestsData.QuestsList do
			if QuestData.Level <= Level then
				table.insert(availableQuests, QuestData)
			end
		end
		
		for _, QuestData in QuestsData.QuestsList do
			if QuestData.Level <= Level then
				CurrentLevel, CurrentQuest = Level, QuestData
				return QuestData
			end
		end
		
		return nil
	end
end

local Settings = {
	ClickV2 = false;
	TweenSpeed = 75;
	SelectedTool = "CombatType";
	BringMobDistance = 35;
	FastAttackSpeed = 0.05;
}

local EquippedTool = nil;
local CurrentTarget = nil;

local Connections = _ENV.rz_connections or {} do
	_ENV.rz_connections = Connections
	
	for i = 1, #Connections do
		Connections[i]:Disconnect()
	end
	
	table.clear(Connections)
end

local function IsAlive(Character)
	if Character then
		local Humanoid = Character:FindFirstChildOfClass("Humanoid");
		return Humanoid and Humanoid.Health > 0;
	end
end

local BodyVelocity do
	BodyVelocity = Instance.new("BodyVelocity")
	BodyVelocity.Velocity = Vector3.zero
	BodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
	BodyVelocity.P = 1000
	
	if _ENV.tween_bodyvelocity then
		_ENV.tween_bodyvelocity:Destroy()
	end
	
	_ENV.tween_bodyvelocity = BodyVelocity
	
	local CanCollideObjects = {}
	
	local function AddObjectToBaseParts(Object)
		if Object:IsA("BasePart") and Object.CanCollide then
			table.insert(CanCollideObjects, Object)
		end
	end
	
	local function RemoveObjectsFromBaseParts(BasePart)
		local index = table.find(CanCollideObjects, BasePart)
		
		if index then
			table.remove(CanCollideObjects, index)
		end
	end
	
	local function NewCharacter(Character)
		table.clear(CanCollideObjects)
		
		for _, Object in Character:GetDescendants() do AddObjectToBaseParts(Object) end
		Character.DescendantAdded:Connect(AddObjectToBaseParts)
		Character.DescendantRemoving:Connect(RemoveObjectsFromBaseParts)
	end
	
	table.insert(Connections, Player.CharacterAdded:Connect(NewCharacter))
	task.spawn(NewCharacter, Player.Character)
	
	local function NoClipOnStepped(Character)
		if _ENV.OnFarm then
			for i = 1, #CanCollideObjects do
				CanCollideObjects[i].CanCollide = false
			end
		elseif Character.PrimaryPart and not Character.PrimaryPart.CanCollide then
			for i = 1, #CanCollideObjects do
				CanCollideObjects[i].CanCollide = true
			end
		end
	end
	
	local function UpdateVelocityOnStepped(Character)
		local BasePart = Character:FindFirstChild("UpperTorso")
		local Humanoid = Character:FindFirstChild("Humanoid")
		local BodyVelocity = _ENV.tween_bodyvelocity
		
		if _ENV.OnFarm and BasePart and Humanoid and Humanoid.Health > 0 then
			if BodyVelocity.Parent ~= BasePart then
				BodyVelocity.Parent = BasePart
			end
		elseif BodyVelocity.Parent then
			BodyVelocity.Parent = nil
		end
		
		if BodyVelocity.Velocity ~= Vector3.zero and (not Humanoid or not Humanoid.SeatPart or not _ENV.OnFarm) then
			BodyVelocity.Velocity = Vector3.zero
		end
	end
	
	table.insert(Connections, RunService.Stepped:Connect(function()
		local Character = Player.Character;
		
		if IsAlive(Character) then
			UpdateVelocityOnStepped(Character)
			NoClipOnStepped(Character)
		end
	end))
end

local PlayerTP do
	local TweenCreator = {} do
		TweenCreator.__index = TweenCreator
		
		local tweens = {}
		local EasingStyle = Enum.EasingStyle.Linear
		
		function TweenCreator.new(obj, time, prop, value)
			local self = setmetatable({}, TweenCreator)
			
			self.tween = TweenService:Create(obj, TweenInfo.new(time, EasingStyle), { [prop] = value })
			self.tween:Play()
			self.value = value
			self.object = obj
			
			if tweens[obj] then
				tweens[obj]:destroy()
			end
			
			tweens[obj] = self
			return self
		end
		
		function TweenCreator:destroy()
			self.tween:Pause()
			self.tween:Destroy()
			
			tweens[self.object] = nil
			setmetatable(self, nil)
		end
		
		function TweenCreator:stopTween(obj)
			if obj and tweens[obj] then
				tweens[obj]:destroy()
			end
		end
	end
	
	local function TweenStopped()
		if not BodyVelocity.Parent and IsAlive(Player.Character) then
			TweenCreator:stopTween(Player.Character:FindFirstChild("HumanoidRootPart"))
		end
	end
	
	local lastCFrame = nil;
	local lastTeleport = 0;
	
	PlayerTP = function(TargetCFrame)
		if not IsAlive(Player.Character) or not Player.Character.PrimaryPart then
			return false
		elseif (tick() - lastTeleport) <= 0.3 and lastCFrame == TargetCFrame then
			return false
		end
		
		local Character = Player.Character
		local Humanoid = Character.Humanoid
		local PrimaryPart = Character.PrimaryPart
		
		if Humanoid.Sit then 
			Humanoid.Sit = false 
			return false
		end
		
		lastTeleport = tick()
		lastCFrame = TargetCFrame
		_ENV.OnFarm = true
		
		local teleportPosition = TargetCFrame.Position;
		local currentPosition = PrimaryPart.Position
		local Distance = (currentPosition - teleportPosition).Magnitude;
		
		if Distance < 20 then
			PrimaryPart.CFrame = TargetCFrame
			return TweenCreator:stopTween(PrimaryPart)
		end
		
		TweenCreator.new(PrimaryPart, Distance / Settings.TweenSpeed, "CFrame", TargetCFrame)
		return true
	end
	
	table.insert(Connections, BodyVelocity:GetPropertyChangedSignal("Parent"):Connect(TweenStopped))
end

local CurrentTime = workspace:GetServerTimeNow()

local function FastAttack()
	if not IsAlive(Player.Character) then return end
	local Tool = Player.Character:FindFirstChildOfClass("Tool")
	if not Tool then return end
	
	CurrentTime = workspace:GetServerTimeNow()
	
	pcall(function()
		Tool:Activate()
		
		local Handle = Tool:FindFirstChild("Handle")
		if Handle then
			if Handle:FindFirstChild("Cooldown") then Handle.Cooldown.Value = 0 end
			if Handle:FindFirstChild("AttackCooldown") then Handle.AttackCooldown.Value = 0 end
			if Handle:FindFirstChild("Debounce") then Handle.Debounce.Value = false end
			
			local Sound = Handle:FindFirstChildOfClass("Sound")
			if Sound then Sound:Play() end
		end
		
		ToolEvent:FireServer("Effects", 1)
		ToolEvent:FireServer("Activate", 1)
		
		if Settings.ClickV2 then
			for i = 1, 3 do
				Tool:Activate()
				task.wait(0.01)
			end
		end
	end)
end

local function DealDamage(Enemies)
	CurrentTime = workspace:GetServerTimeNow()
	
	CombatEvent:FireServer("DealDamage", {
		CallTime = CurrentTime;
		DelayTime = 0;
		Combo = 1;
		Results = Enemies;
		Damage = math.random(50, 150);
		CriticalHit = math.random(1, 10) <= 3;
	})
end

local function GetMobFromFolder(Folder, EnemyName)
	local foundEnemies = {}
	
	for _, Enemy in pairs(Folder:GetChildren()) do
		if Enemy and Enemy.Parent then
			local enemyName = Enemy:GetAttribute("OriginalName") or Enemy:GetAttribute("EnemyName") or Enemy.Name
			
			if enemyName == EnemyName or string.find(enemyName, EnemyName) then
				local Humanoid = Enemy:FindFirstChild("Humanoid")
				local HumanoidRootPart = Enemy:FindFirstChild("HumanoidRootPart")
				
				if Humanoid and HumanoidRootPart and Humanoid.Health > 0 then
					local isReady = true
					if Enemy:GetAttribute("Respawned") ~= nil then
						isReady = Enemy:GetAttribute("Respawned")
					end
					if Enemy:GetAttribute("Ready") ~= nil then
						isReady = isReady and Enemy:GetAttribute("Ready")
					end
					
					if isReady then
						table.insert(foundEnemies, Enemy)
					end
				end
			end
		end
	end
	
	return foundEnemies
end

local function GetAllQuestEnemies(EnemyName)
	local AllEnemies = {}
	
	local EnemyFolder = EnemiesFolders[EnemyName]
	
	if EnemyFolder and EnemyFolder.Parent then
		local enemies = GetMobFromFolder(EnemyFolder, EnemyName)
		for _, enemy in ipairs(enemies) do
			table.insert(AllEnemies, enemy)
		end
	else
		if Enemys and Enemys.Parent then
			local Islands = Enemys:GetChildren()
			
			for i = 1, #Islands do
				local Island = Islands[i]
				if Island and Island.Parent then
					local enemies = GetMobFromFolder(Island, EnemyName)
					
					if #enemies > 0 then
						EnemiesFolders[EnemyName] = Island
						
						for _, enemy in ipairs(enemies) do
							table.insert(AllEnemies, enemy)
						end
					end
				end
			end
		end
	end
	
	return AllEnemies
end

local function GetClosestEnemy(EnemyName)
	local AllEnemies = GetAllQuestEnemies(EnemyName)
	
	if #AllEnemies == 0 then 
		return nil 
	end
	
	local ClosestEnemy = nil
	local ShortestDistance = math.huge
	
	for i, Enemy in ipairs(AllEnemies) do
		if Enemy and Enemy.Parent then
			local RootPart = Enemy:FindFirstChild("HumanoidRootPart")
			local Humanoid = Enemy:FindFirstChild("Humanoid")
			
			if RootPart and Humanoid and Humanoid.Health > 0 then
				local Distance = Player:DistanceFromCharacter(RootPart.Position)
				
				if Distance < ShortestDistance then
					ShortestDistance = Distance
					ClosestEnemy = Enemy
				end
			end
		end
	end
	
	return ClosestEnemy
end

local function BringQuestMobs(EnemyName, TargetPosition)
	if not _ENV.BringMob then 
		return 0
	end
	
	local AllEnemies = GetAllQuestEnemies(EnemyName)
	local BroughtCount = 0
	
	if #AllEnemies == 0 then
		return 0
	end
	
	for i, Enemy in ipairs(AllEnemies) do
		if Enemy and Enemy.Parent then
			local RootPart = Enemy:FindFirstChild("HumanoidRootPart")
			local Humanoid = Enemy:FindFirstChild("Humanoid")
			
			if RootPart and Humanoid and Humanoid.Health > 0 then
				if not RootPart:FindFirstChild("BodyVelocity") then
					local BV = Instance.new("BodyVelocity", RootPart)
					BV.Velocity = Vector3.zero
					BV.MaxForce = Vector3.one * math.huge
				end
				
				RootPart.CanCollide = false
				RootPart.Size = Vector3.one * Settings.BringMobDistance
				
				RootPart.CFrame = TargetPosition
				BroughtCount = BroughtCount + 1
			end
		end
	end
	
	if BroughtCount > 0 then
		pcall(sethiddenproperty, Player, "SimulationRadius", math.huge)
	end
	
	return BroughtCount
end

local function IsSelectedTool(Tool)
	return Tool:GetAttribute(Settings.SelectedTool)
end

local function EquipCombat(Activate)
	if not IsAlive(Player.Character) then return end
	
	if EquippedTool and IsSelectedTool(EquippedTool) then
		if Activate then
			if Settings.ClickV2 then
				FastAttack()
			else
				EquippedTool:Activate()
			end
		end
		
		if EquippedTool.Parent == Player.Backpack then
			Player.Character.Humanoid:EquipTool(EquippedTool)
		elseif EquippedTool.Parent ~= Player.Character then
			EquippedTool = nil;
		end
		return nil
	end
	
	local Equipped = Player.Character:FindFirstChildOfClass("Tool")
	
	if Equipped and IsSelectedTool(Equipped) then
		EquippedTool = Equipped
		return nil;
	end
	
	for _, Tool in Player.Backpack:GetChildren() do
		if Tool:IsA("Tool") and IsSelectedTool(Tool) then
			EquippedTool = Tool
			Player.Character.Humanoid:EquipTool(Tool)
			return nil;
		end
	end
end

local function HasQuest(EnemyName)
	local success, result = pcall(function()
		local QuestFrame = Player.PlayerGui.MainUI.MainFrame.CurrentQuest
		
		if not QuestFrame.Visible then
			return false
		end
		
		local questText = nil
		
		local goalElement = QuestFrame:FindFirstChild("Goal")
		if goalElement and goalElement.Text then
			questText = goalElement.Text
		end
		
		if not questText then
			for _, child in pairs(QuestFrame:GetDescendants()) do
				if child:IsA("TextLabel") and child.Text and child.Text ~= "" then
					if string.find(child.Text, "Defeat") or string.find(child.Text, "/") then
						questText = child.Text
						break
					end
				end
			end
		end
		
		if questText then
			local hasTargetQuest = string.find(questText, EnemyName)
			return hasTargetQuest ~= nil
		else
			return false
		end
	end)
	
	if success then
		return result
	else
		return false
	end
end

local function TakeQuest(QuestName, QuestId)
	local Npc = QuestsNpcs:FindFirstChild(QuestName, true)
	local RootPart = Npc and Npc.PrimaryPart
	
	if RootPart then
		DialogueEvent:FireServer("Quests", { ["NpcName"] = QuestName; ["QuestName"] = QuestId })
		PlayerTP(RootPart.CFrame * CFrame.new(0, 0, 15))
		task.wait(2)
	end
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Vox Seas - Version By Equipe NightShadow",
    SubTitle = "by Zero Scripts, Hidden",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 360),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local MainTab = Window:AddTab({ Title = "Farm", Icon = "home" })
local ConfigTab = Window:AddTab({ Title = "Config", Icon = "settings" })

MainTab:AddSection("Auto Farm")

MainTab:AddToggle("AutoFarm", {
    Title = "Auto Farm Level",
    Default = false,
    Callback = function(Value)
        _ENV.OnFarm = Value
        
        if Value then
            task.spawn(function()
                while task.wait(Settings.FastAttackSpeed) and _ENV.OnFarm do
                    local CurrentQuest = GetCurrentQuest()
                    if not CurrentQuest then continue end
                    
                    if not HasQuest(CurrentQuest.Target) then
                        TakeQuest(CurrentQuest.NpcName, CurrentQuest.Id)
                        continue
                    end
                    
                    local Enemy = GetClosestEnemy(CurrentQuest.Target)
                    if not Enemy then 
                        continue 
                    end
                    
                    CurrentTarget = Enemy
                    local HumanoidRootPart = Enemy:FindFirstChild("HumanoidRootPart")
                    local Humanoid = Enemy:FindFirstChild("Humanoid")
                    
                    if HumanoidRootPart and Humanoid and Humanoid.Health > 0 then
                        EquipCombat(true)
                        
                        if _ENV.BringMob then
                            local broughtCount = BringQuestMobs(CurrentQuest.Target, HumanoidRootPart.CFrame)
                        end
                        
                        local targetCFrame = HumanoidRootPart.CFrame * CFrame.new(0, 7, 0) * CFrameAngle
                        
                        local teleportSuccess = PlayerTP(targetCFrame)
                        if teleportSuccess == false then
                            Player.Character.HumanoidRootPart.CFrame = targetCFrame
                        end
                        
                        task.wait(0.1)
                        
                        local AllQuestEnemies = GetAllQuestEnemies(CurrentQuest.Target)
                        if #AllQuestEnemies > 0 then
                            DealDamage(AllQuestEnemies)
                        end
                        
                        FastAttack()
                    end
                end
            end)
        end
    end
})

MainTab:AddToggle("BringMob", {
    Title = "Bring Mob",
    Default = false,
    Callback = function(Value)
        _ENV.BringMob = Value
    end
})

ConfigTab:AddSection("Combat Settings")

ConfigTab:AddToggle("ClickV2", {
    Title = "Click V2",
    Default = false,
    Callback = function(Value)
        Settings.ClickV2 = Value
    end
})

ConfigTab:AddSlider("FastAttackSpeed", {
    Title = "Attack Speed",
    Default = 0.05,
    Min = 0.01,
    Max = 0.5,
    Rounding = 2,
    Callback = function(Value)
        Settings.FastAttackSpeed = Value
    end
})

ConfigTab:AddSection("Movement Settings")

ConfigTab:AddSlider("TweenSpeed", {
    Title = "Tween Speed",
    Default = 75,
    Min = 30,
    Max = 150,
    Rounding = 0,
    Callback = function(Value)
        Settings.TweenSpeed = Value
    end
})

ConfigTab:AddSection("BringMob Settings")

ConfigTab:AddSlider("BringMobDistance", {
    Title = "BringMob Size",
    Default = 35,
    Min = 10,
    Max = 100,
    Rounding = 0,
    Callback = function(Value)
        Settings.BringMobDistance = Value
    end
})

ConfigTab:AddSection("Tool Settings")

ConfigTab:AddDropdown("ToolType", {
    Title = "Select Tool Type",
    Values = {"CombatType", "Sword", "Gun"},
    Default = "CombatType",
    Callback = function(Value)
        Settings.SelectedTool = Value
    end
})

Fluent:Notify({
    Title = "Vox Seas Hub",
    Content = "Script carregado com sucesso!",
    Duration = 5
})